// Import necessary functions from Redux Toolkit Query
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";

// Create an API using createApi from Redux Toolkit Query
const menuItemApi = createApi({
  // Configuration options for the API
  reducerPath: "menuItemsApi", // A name for the slice of state for this API
  baseQuery: fetchBaseQuery({
    baseUrl: "https://redmangoapi.azurewebsites.net/api/", // Base URL for API requests
    prepareHeaders: (headers: Headers, api) => {
      const token = localStorage.getItem("token");
      token && headers.append("Authorization", "Bearer " + token);
    },
  }),
  tagTypes: ["MenuItems"], // Define tag types for caching purposes
  endpoints: (builder) => ({
    // Define API endpoints using builder
    getMenuItems: builder.query({
      // Endpoint for getting multiple menu items
      query: () => ({
        url: "menuitem", // API endpoint URL
      }),
      providesTags: ["MenuItems"], // Tags for caching and invalidation
    }),
    getMenuItemById: builder.query({
      // Endpoint for getting a menu item by ID
      query: (id) => ({
        url: `menuitem/${id}`, // API endpoint URL with parameter
      }),
      providesTags: ["MenuItems"], // Tags for caching and invalidation
    }),
    createMenuItem: builder.mutation({
      query: (data) => ({
        url: "MenuItem",
        method: "POST",
        body: data,
      }),
      invalidatesTags: ["MenuItems"],
    }),
    updateMenuItem: builder.mutation({
      query: ({ data, id }) => ({
        url: "menuitem/" + id,
        method: "PUT",
        body: data,
      }),
      invalidatesTags: ["MenuItems"], // Note the corrected spelling of "invalidatesTags"
    }),
    deleteMenuItem: builder.mutation({
      query: (id) => ({
        url: "menuitem/" + id,
        method: "DELETE",
      }),
      invalidatesTags: ["MenuItems"], // Note the corrected spelling of "invalidatesTags"
    }),
  }),
});

// Extract query hooks generated by createApi for each endpoint
export const {
  useGetMenuItemsQuery,
  useGetMenuItemByIdQuery,
  useCreateMenuItemMutation,
  useUpdateMenuItemMutation,
  useDeleteMenuItemMutation,
} = menuItemApi;

// Export the configured API
export default menuItemApi;
