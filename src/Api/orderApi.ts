// Import necessary functions from Redux Toolkit Query
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";

// Create an API using createApi from Redux Toolkit Query
const orderApi = createApi({
  // Configuration options for the API
  reducerPath: "orderApi", // A name for the slice of state for this API
  baseQuery: fetchBaseQuery({
    baseUrl: "https://redmangoapi.azurewebsites.net/api/", // Base URL for API requests
    prepareHeaders: (headers: Headers, api) => {
      const token = localStorage.getItem("token");
      token && headers.append("Authorization", "Bearer " + token);
    },
  }),
  tagTypes: ["Orders"],

  endpoints: (builder) => ({
    // Define API endpoints using builder
    createOrder: builder.mutation({
      // Endpoint for creating an order
      // We pass orderDetails in the request body for a POST request
      query: (orderDetails) => ({
        url: "order", // API endpoint URL
        method: "POST",
        headers: {
          "Content-type": "application/json",
        },
        body: orderDetails,
      }),
      invalidatesTags: ["Orders"],
    }),
    getAllOrders: builder.query({
      // Endpoint for fetching multiple orders
      query: (userid) => ({
        url: "order", // API endpoint URL
        params: {
          userid: userid,
        },
      }),
      providesTags: ["Orders"], // Tags for caching and invalidation
    }),
    getOrderDetails: builder.query({
      // Endpoint for fetching order details by ID
      query: (id) => ({
        url: `order/${id}`, // API endpoint URL with parameter
      }),
      providesTags: ["Orders"], // Tags for caching and invalidation cache will take values from cache but invalidate will go to the database
    }),
    updateOrderHeader: builder.mutation({
      query: (orderDetails) => ({
        url: "order/" + orderDetails.orderHeaderId,
        method: "PUT",
        headers: {
          "Content-type": "application/json",
        },
        body: orderDetails,
      }),
      invalidatesTags: ["Orders"], // Note the corrected spelling of "invalidatesTags"
    }),
  }),
});

// Extract query hooks generated by createApi for each endpoint
export const {
  useCreateOrderMutation,
  useGetAllOrdersQuery,
  useGetOrderDetailsQuery,
  useUpdateOrderHeaderMutation,
} = orderApi;

// Export the configured API
export default orderApi;
